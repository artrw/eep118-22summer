?knitr::opts_chunk
knitr::opts_chunk()
str(knitr::opts_chunk$get())
first5primes <- c(2, 3, 5, 7, 11)
print(class(first5primes))
first5primes[1]-2
first5primes[1]-2==0
first5primes[1]==2
first5primes[1]==(4/2)
11*7==77
# This line creates an object names "first5primes" which is a numeric vector
# Note that object assignment in R is done using "<-"; newer versions of R also
# allow the use of "=" like most other coding languages but this is still not
# the norm in most R code
# Also note that you can write comments in R code using a preceding "#" (hashtag)
first5primes <- c(2, 3, 5, 7, 11)
class(first5primes)
nchar(first5primes)
# Subsetting is done with square brackets, note that unlike many other coding
# languages there is no "0th" position in R, the first element is in position 1
first5primes[1])
5 + 5
first5primes[1]
5%/%5
27%/%5
5 > 3 | 3 > 4
!(5 > 6)
6 %in% c(5, 6, 7)
5 == 5
0.1 + 0.3 == 0.4
.1+.2==.3
0.1+0.2==0.3
?seq
seq(from = 1, to = 5, by = 1)
class(c(1, 2, 3, 4, 5))
class(1:5)
class(seq(from = 1, to = 5, by = 1))
c("a", "b", "c")
class(c("a", "b", "c"))
c("a", 5, "b")
"a":"b"
list("a", 2, "c")
matrix(data = c(1, 2, 3, 4, 5, 6, 7, 8, 9), nrow = 3, ncol = 3)
testdf <- data.frame(a = c(1, 2, 3), b = c(1, 4, 9))
testdf$a
testdf[,1]
testdf[,a]
testdf[,"a"]
?iseven
?isodd
?even
testdf[testdf$a > 1,]
"test"[1]
substr("test", 1, 1)
isFirstLetterVowel <- function(word){
if (is.character(word) == FALSE){
stop("Function input must be class character")
}
firstletter <- substr(word, 1, 1)
return(firstletter %in% c("a", "e", "i", "o", "u"))
}
isFirstLetterVowel("alphabet")
isFirstLetterVowel("chicken")
isFirstLetterVowel(56)
?rnorm
sample <- rnorm(100, 0, 1)
mean <- sum(sample)/n(sample)
?n
sample <- rnorm(100, 0, 1)
mean <- sum(sample)/length(sample)
print(mean)
sample
sum(sample)
letterVowels <- function(word){
if (is.character(word) == FALSE){
stop("Function input must be class character")
}
result <- c() # start with an empty vector
for (i in 1:nchar(word)){
letter <- substr(word, i, i)
c[i] <- (letter %in% c("a", "e", "i", "o", "u"))
}
return(result)
}
letterVowels("alphabet")
letterVowels <- function(word){
if (is.character(word) == FALSE){
stop("Function input must be class character")
}
result <- c() # start with an empty vector
for (i in 1:nchar(word)){
letter <- substr(word, i, i)
result[i] <- letter %in% c("a", "e", "i", "o", "u")
}
return(result)
}
letterVowels("alphabet")
LETTERS
tolower(LETTERS)
?tolower
letterToNumber <- data.frame(letter = tolower(LETTERS), number = 1:26)
wordSum <- function(word){
sum <- 0
for (i in 1:nchar(word)){
letter <- substr(word, i, i)
sum <- sum + letterToNumber[letterToNumber$letter == letter, "number"]
}
return(sum)
}
wordSum("alphabet")
wordSum("cake")
?rep
myMatrix <- matrix(data = sample, nrow = 10, ncol = 10)
myMatrix[,3] <- rep.int(0, 10)
print(myMatrix)
myMatrix <- matrix(data = sample, nrow = 10, ncol = 10)
myMatrix[,3] <- rep.int(0, 10)
myMatrix[2,] <- round(myMatrix[2,], digits = 1)
print(myMatrix)
myMatrix <- matrix(data = sample, nrow = 10, ncol = 10)
myMatrix[,3] <- rep.int(0, 10)
myMatrix <- round(myMatrix, digits = 1)
print(myMatrix)
